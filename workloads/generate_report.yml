---
#
# Generate workload report
#

- name: Generate workload report
  hosts: orchestration
  gather_facts: true
  remote_user: "{{orchestration_user}}"
  vars_files:
    - "vars/{{ playbook_vars_file }}"
  tasks:
    # Read promql vars from template use job_name and build_number
    - name: Lookup list of prom queries
      shell: "cat {{ansible_user_dir}}/scale-ci-tooling/prometheus.yml"
      register: promql_queries_output
    
    # Set promql vars from template
    - name: Set fact
      set_fact:
        promql_queries: "{{ promql_queries_output.stdout | from_yaml }}"
    
    # Get end time
    - name: Sleep time to capture workloads ramp down metrics
      shell: sleep {{ post_workload_sleep_time }}

    # Get end time
    - name: Get end time
      shell: |
          date +%s
      register: endtime_set

    # Set end time
    - name: Set End time
      set_fact:
        end_time: "{{endtime_set.stdout}}"
    
    # Prometheus server
    - name: Get default Prometheus endpoint/url
      shell: |
        oc get route prometheus-k8s -n openshift-monitoring -o jsonpath="{.spec.host}"
      register: prom_url_cmd

    - name: Create cluster role, binding and sa
      shell: |
        oc create clusterrole scale-ci-prometheus-reader-role --verb=get --resource=namespaces --dry-run -o yaml | oc apply -f -
        oc create sa --namespace scale-ci-tooling scale-ci-prometheus-reader --dry-run -o yaml | oc apply -f -
        oc create clusterrolebinding scale-ci-prometheus-reader-role-binding --clusterrole=scale-ci-prometheus-reader-role --serviceaccount=scale-ci-tooling:scale-ci-prometheus-reader --dry-run -o yaml | oc apply -f -

    - name: Ensure prometheus-user-workload and expose a route
      shell:
        oc create route passthrough prometheus-user-workload --service=prometheus-user-workload --namespace openshift-user-workload-monitoring --dry-run -o yaml | oc apply --namespace openshift-user-workload-monitoring -f -

    - name: Get additional endpoint/urls
      shell: |
        oc get route {{item}} -o jsonpath="{.spec.host}"
      with_items:
        - "prometheus-user-workload --namespace openshift-user-workload-monitoring"
      register: prom_secondary_urls_cmd

    - name: Set Prometheus endpoint/url
      set_fact:
        prom_url: "{{prom_url_cmd.stdout}}"
        prom_secondary_urls: "{{prom_secondary_urls_cmd.results | map(attribute='stdout') | map('regex_replace', '(.*)', 'https://\\1/') | join(',') }}"

    # Prometheus user
    - name: Set Prometheus user
      set_fact:
        prom_user: "internal"

    # Get prometheus server password
    - name: Get Prometheus password
      shell: |
        {%raw%}oc get secrets -n openshift-monitoring grafana-datasources -o go-template='{{index .data "prometheus.yaml"}}' | base64 --decode | jq '.datasources[0].basicAuthPassword'{%endraw%}
      register: prom_pass_cmd


    - name: Get Prometheus token
      shell: |
        {%raw%}oc --namespace scale-ci-tooling serviceaccounts get-token scale-ci-prometheus-reader{%endraw%}
      register: prom_token_cmd

    # Set prom pass
    - name: Set Prometheus pass
      set_fact:
        prom_pass: "{{prom_pass_cmd.stdout.replace('\"', '')}}"
      no_log: true

    - name: Set Prometheus token
      set_fact:
        prom_token: "{{prom_token_cmd.stdout.replace('\"', '')}}"
      no_log: true

    # path to store reports 
    - name: Set workload report file storage path
      set_fact:
        file_path: "{{workspace}}/reports"

    # Call the python program and generate csv or plot file
    - name: Get/run reports
      shell: |
        python3 "{{playbook_dir}}"/files/workload-report.py \
        --start="{{ promql_queries.starttime }}" \ 
        --end="{{ end_time }}" \
        --step="{{item.step}}" \
        --url="https://{{prom_url}}" \
        --secondary_urls="{{prom_secondary_urls|default("")}}" \
        --user="{{ prom_user }}" \
        --pass="{{ prom_pass }}" \
        --token="{{ prom_token }}" \
        --promql="{{item.expr}}" \
        --prometheus_server_type="{{item.prometheus_server_type}}" \
        --prometheus_server_index="{{item.prometheus_server_index}}" \
        --file_path="{{file_path}}" \
        --file_name="{{job_name + '-' + build_number + '-' + item.name + '.csv'}}" \
        --title="{{item.title}}" \
        --description="{{item.description}}" \
        --x_axis="{{item.x_label}}" \
        --y_axis="{{item.y_label}}"
      with_items:
        - "{{ promql_queries.query }}"