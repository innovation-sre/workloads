apiVersion: v1
kind: ConfigMap
metadata:
  name: scale-ci-fio-script
data:
  run.sh: |
    #!/bin/sh
    set -eo pipefail
    # pbench Configuration
    echo "$(date -u) Configuring pbench for FIO I/O scale test"
    mkdir -p /var/lib/pbench-agent/tools-default/
    echo "${USER_NAME:-default}:x:$(id -u):0:${USER_NAME:-default} user:${HOME}:/sbin/nologin" >> /etc/passwd
    echo "" > /var/lib/pbench-agent/tools-default/oc
    echo "workload" > /var/lib/pbench-agent/tools-default/label
    source /opt/pbench-agent/profile
    if [ "${ENABLE_PBENCH_AGENTS}" = true ]; then
      # clear tools/remotes to make sure there are no invalid remotes
      set +eo pipefail
      pbench-clear-tools
      set -eo pipefail
      echo "" > /var/lib/pbench-agent/tools-default/disk
      echo "" > /var/lib/pbench-agent/tools-default/iostat
      echo "" > /var/lib/pbench-agent/tools-default/mpstat
      echo "" > /var/lib/pbench-agent/tools-default/perf
      echo "" > /var/lib/pbench-agent/tools-default/pidstat
      echo "" > /var/lib/pbench-agent/tools-default/sar
      master_nodes=`oc get nodes -l pbench_agent=true,pbench_role=master --no-headers | awk '{print $1}'`
      for node in $master_nodes; do
        echo "master" > /var/lib/pbench-agent/tools-default/remote@$node
      done
      infra_nodes=`oc get nodes -l pbench_agent=true,pbench_role=infra --no-headers | awk '{print $1}'`
      for node in $infra_nodes; do
        echo "infra" > /var/lib/pbench-agent/tools-default/remote@$node
      done
      worker_nodes=`oc get nodes -l pbench_agent=true,pbench_role=worker --no-headers | awk '{print $1}'`
      for node in $worker_nodes; do
        echo "worker" > /var/lib/pbench-agent/tools-default/remote@$node
      done
      # FIO test expect storage backend - get label for these nodes too
      storage_nodes=`oc get nodes -l pbench_agent=true,pbench_role=worker --no-headers | awk '{print $1}'`
      for node in $storage_nodes; do
        echo "storage" > /var/lib/pbench-agent/tools-default/remote@$node
      done
    fi
    echo "$(date -u) Done configuring pbench for FIO I/O scale test"
    # End pbench Configuration
    #
    # Test Configuration
    if [[ "${AZURE_AUTH}" == "true" ]]; then
      export AZURE_AUTH_LOCATION=/tmp/azure_auth
    fi
    echo "$(date -u) Creating pods for FIO I/O scale test - pods will be in namespace:" {{ fiotest_basename }}0
    mkdir -p /tmp/snafu_results
    export cluster_name={{ snafu_cluster_name }}
    export test_user={{ snafu_user }}
    export es={{ snafu_es_host }}
    export es_port={{ snafu_es_port }}
    export es_index={{ snafu_es_index_prefix }}
    #pbench-user-benchmark --config="{{ fiotest_prefix }}-pods-{{ fiotest_maxpods }}-sc-{{ fiotest_storageclass }}-create_pods-{{ fiotest_description }}" -- 'VIPERCONFIG=/root/workload/fiotest.yml run_snafu -t cl scale-ci --cl-output True --dir /tmp/snafu_results -p openshift-tests'
    VIPERCONFIG=/root/workload/fiotest.yml run_snafu -t cl scale-ci --cl-output True --dir /tmp/snafu_results -p openshift-tests

    echo "$(date -u) Pods for FIO I/O test created."

    # wait until all pods are started and then collect data
    while [[ $(oc get pods -n {{ fiotest_basename }}0 | grep fiotest-pod | grep -cE "Running|Completed" ) -lt {{ fiotest_nodes_list|length * fiotest_completions_per_job|int }} ]] ; do
      sleep 10
      echo "Waiting on pods ({{ fiotest_nodes_list|length * fiotest_completions_per_job|int }}) to start..."
    done
    ## necessary for user diffrent than root
    clients=`oc get pods --output=json -n {{ fiotest_basename }}0 | jq -r '[.items[].status.podIP] | join(",")'`
    touch /.ssh/config
    mv /.ssh/config /.ssh/config.bak || true
    for host in $(echo "${clients}" | sed "s/,/ /g");
    do
      HOST=${host} envsubst < /root/workload/ssh_config.template >> /.ssh/config
    done
    cat /.ssh/config.bak >> ~/.ssh/config || true
    chmod 0600 /.ssh/config || true
    #cp /root/workload/fiotest.sh /tmp/

    # Execute fio test
    # /tmp/fiotest.sh
    #pbench-user-benchmark --config="{{ fiotest_prefix }}-pods-{{ fiotest_maxpods }}-sc-{{ fiotest_storageclass }}-create_pods-{{ fiotest_description }}" -- sh /tmp/fiotest.sh
    # todo: improve no-pbench test case
    #if [[ {{ enable_pbench_copy }} == "true" ]]; then
    #  pbench-copy-results --prefix "{{ fiotest_prefix }}"-"{{ fiotest_maxpods }}"-"{{ fiotest_storageclass }}"
    #fi

    kubectl logs -l name=fio -n {{ fiotest_basename }}0 -f
    if [[ {{ fiotest_cleanup }} == "true" ]]; then
       oc delete project {{ fiotest_basename }}0
       while [ "$(oc get project |grep {{ fiotest_basename }}0 | awk '{print $1}')" == {{ fiotest_basename }}0 ]; do
         echo "waiting on project {{ fiotest_basename }}0 to disappear ..."
         sleep 10
       done
       echo "Project {{ fiotest_basename }}0 is deleted ... test finished"
    elif [[ {{ fiotest_cleanup }} == "false" ]]; then
       echo "Test is done, but project {{ fiotest_basename }}0 is not be deleted due to FIOTEST_CLEANUP=false"
    fi
  fiotest.yml: |
    provider: local
    ClusterLoader:
      projects:
        - num: 1
          basename: {{ fiotest_basename }}
          ifexists: delete
          {% if workload_nodeselector %}
          nodeselector: {{ workload_nodeselector }}
          {% else %}
          nodeselector: "node-role.kubernetes.io/worker="
          {% endif %}
          labels:
            workload: {{ fiotest_basename }}
          templates:
            - num: 1
              file: /root/workload/pbench-ssh.yaml
              parameters:
              - SSH_AUTHORIZED_KEYS: {{ fiotest_ssh_authorized_keys }}
              - SSH_PRIVATE_KEY: {{ fiotest_ssh_private_key }}
              - SSH_PUBLIC_KEY: {{ fiotest_ssh_public_key }}
            - num: 1
              file: fioscripttemplate.yaml
            - num: 1
              file: fiotesttemplate.yaml
              parameters:
              - FIOTEST_POD_IMAGE: {{ fiotest_pod_image }}
              - FIO_SSH_PORT: {{ fiotest_ssh_port }}
      tuningsets:
        - name: default
          pods:
            stepping:
              stepsize: {{ fiotest_stepsize }}
              pause: {{ fiotest_pause }}
            ratelimit:
                delay: 0
  fioscripttemplate.yaml: |
    kind: Template
    apiVersion: v1
    metadata:
      name: fio
      annotations:
        description: A template for creating an fio pod with PVC
        tags: fio,perf
    labels:
      name: fiotest-test
    objects:
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: fio-script
      data:
        test.fio: |
          [global]
          rw={{ fiotest_testtype }}
          rwmixread={{ fiotest_rwmixread }}
          size={{ fiotest_filesize }}
          directory=/mnt/pvcmount
          fadvise_hint=0
          direct={{ fiotest_direct }}
          blocksize={{ fiotest_bs }}
          numjobs=($ncpus)/2
          {% if fiotest_runtime|int != 0 %}
          time_based
          runtime={{ fiotest_runtime }}
          {% endif %}
          ioengine={{ fiotest_engine }}
          norandommap=1
          {% if workload_job_privileged| bool %}
          #exec_prerun=echo 3 > /host-proc/sys/vm/drop_caches
          {% endif %}

          [test-multi-file-io-4]
          new_group
          iodepth=4
          nrfiles={{ fiotest_samples }}

          [test-multi-file-io-8]
          new_group
          iodepth=8
          nrfiles={{ fiotest_samples }}

          [test-multi-file-io-16]
          new_group
          iodepth=16
          nrfiles={{ fiotest_samples }}
        fiotest.sh: |
          #!/bin/bash
          set -xe
          export CONFIG=/opt/pbench-agent/config/pbench-agent.cfg
          source /opt/pbench-agent/profile
          export PATH="/opt/rh/rh-python36/root/usr/bin/:$PATH"
          echo "FIO Version $(fio --version)"
          echo "Path set for python3"
          env
          ls /mnt/pvcmount/
          export GIT_COMMITTER_NAME="scale-ci"
          export GIT_COMMITTER_EMAIL="scale-ci@redhat.com"
          rm -rf /mnt/pvcmount/fio-parser
          git clone https://github.com/innovation-sre/fio-parser.git /mnt/pvcmount/fio-parser
          echo "------FIO PROFILE (start)------"
          cat /root/workload/test.fio
          echo "------FIO PROFILE (end)------"
          echo "Starting fio"
          fio /root/workload/test.fio --minimal --output="/mnt/pvcmount/fio-output"
          echo "Completed fio"
          echo "------FIO RESULTS (start)------"
          cat /mnt/pvcmount/fio-output
          echo "------FIO RESULTS (end)------"
          python3 /mnt/pvcmount/fio-parser/fio-parser.py /mnt/pvcmount/fio-output
    parameters:
    - name: IDENTIFIER
      description: Number to append to the name of resources
      value: '1'
  fiotesttemplate.yaml: |
    kind: Template
    apiVersion: v1
    metadata:
      name: fio
      annotations:
        description: A template for creating an fio pod with PVC
        tags: fio,perf
    labels:
      name: fiotest-test
    objects:
    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: useroot
    {% for fiotest_node in fiotest_nodes_list %}
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: "fio-{{loop.index}}"
        annotations:
          volume.beta.kubernetes.io/storage-class: {{ fiotest_storageclass }}
        {% if ocp_cluster_environment == 'ibm_cloud' %}
        labels:
          billingType: "{{ ibm_cloud_storage_billing }}"
          region: "{{ ibm_cloud_storage_region }}"
          zone: "{{ ibm_cloud_storage_zone }}"
        {% endif %}
      spec:
        accessModes:
         - {{ fiotest_access_modes }}
        resources:
          requests:
            storage: {{ fiotest_storage_size }}
    - apiVersion: batch/v1
      kind: Job
      metadata:
        labels:
          workload: fio
        name: fiotest-pod-{{loop.index}}
      spec:
        completions: {{ fiotest_completions_per_job }}
        parallelism: {{ fiotest_parallelism }}
        template:
          metadata:
            labels:
              name: fio
            name: fio
          spec:
            hostNetwork: false
            containers:
              - name: "fio"
                image: "{{ fiotest_pod_image }}"
                imagePullPolicy: IfNotPresent
                command: ["/root/workload/fiotest.sh"]
                env:
                  - name: FIO_SSH_PORT
                    value: "{{ fiotest_ssh_port }}"
                  - name: SSH_PORT
                    value: "{{ fiotest_ssh_port }}"
                  - name: BUILD_NUMBER
                    value: "{{ build_number }}"
                  - name: FIOTEST_TESTTYPE
                    value: "{{ fiotest_testtype }}"
                  - name: FIOTEST_MAXPODS
                    value: "{{ fiotest_maxpods }}"
                  - name: FIOTEST_STORAGE_SIZE
                    value: "{{ fiotest_storage_size }}"
                  - name: FIOTEST_STORAGECLASS
                    value: "{{ fiotest_storageclass }}"
                  - name: FIOTEST_BS
                    value: "{{ fiotest_bs }}"
                  - name: FIOTEST_ENGINE
                    value: "{{ fiotest_engine }}"
                  - name: FIOTEST_RUNTIME
                    value: "{{ fiotest_runtime }}"
                  - name: FIOTEST_FILESIZE
                    value: "{{ fiotest_filesize }}"
                  - name: FIOTEST_NODE
                    value: "{{ fiotest_node }}"
                  - name: FIOTEST_JOB_ID
                    value: "fiotest-pod-{{loop.index}}"
                {% if workload_job_privileged| bool %}
                securityContext:
                    runAsUser: 0
                {% else %}
                securityContext: {}
                {% endif %}
                volumeMounts:
                  - name: pbench-ssh
                    mountPath: /.ssh/authorized_keys
                    subPath: authorized_keys
                  - name: pbench-ssh
                    mountPath: /root/.ssh/authorized_keys
                    subPath: authorized_keys
                  - name: pbench-results
                    mountPath: /var/lib/pbench-agent
                  - name: persistentvolume
                    mountPath: "/mnt/pvcmount"
                  - name: fio-script
                    mountPath: "/root/workload/"
                  {% if workload_job_privileged| bool %}
                  - name: host-proc-fs
                    mountPath: "/host-proc/"
                  {% endif %}
            dnsPolicy: ClusterFirst
            securityContext: {}
            restartPolicy: OnFailure
            {% if workload_anti_affinity %}
            nodeSelector:
              kubernetes.io/hostname: '{{ fiotest_node }}'
            {% endif %}
            {% if workload_job_privileged| bool %}
            serviceAccountName: useroot
            {% endif %}
            volumes:
              - name: pbench-ssh
                secret:
                  secretName: pbench-ssh
                  defaultMode: 0600
              - name: pbench-results
                emptyDir: {}
              - name: persistentvolume
                persistentVolumeClaim:
                  claimName: "fio-{{loop.index}}"
              - name: fio-script
                configMap:
                  name: fio-script
                  defaultMode: 0777
              {% if workload_job_privileged| bool %}
              - name: host-proc-fs
                hostPath:
                  path: /proc
              {% endif %}
    {% endfor %}
    parameters:
    - name: IDENTIFIER
      description: Number to append to the name of resources
      value: '1'
    - name: FIO_SSH_PORT
      description: What port should the sshd process in the fio container listen on
      value: "2022"
      required: true
    - name: FIOTEST_POD_IMAGE
      description: Which fio container image to be used in this pod
      value: "quay.io/openshift-scale/scale-ci-fio"
      required: true
  pbench-ssh.yaml: |
    kind: Template
    apiVersion: v1
    metadata:
      name: sshSecretTemplate
      creationTimestamp:
      annotations:
        description: Template to create ssh secret
        tags: ''
    objects:
      - apiVersion: v1
        kind: Secret
        metadata:
          name: pbench-ssh
        type: Opaque
        data:
          authorized_keys: {{ fiotest_ssh_authorized_keys }}
          id_rsa: {{ fiotest_ssh_private_key }}
          id_rsa.pub: {{ fiotest_ssh_public_key }}
    parameters:
    - name: IDENTIFIER
      description: Number to append to the name of resources
      value: "1"
      required: true
    - name: SSH_AUTHORIZED_KEYS
      description: Authorized key file encoded for a secret
      required: true
    - name: SSH_PRIVATE_KEY
      description: SSH private key
      required: true
    - name: SSH_PUBLIC_KEY
      description: SSH public key
      required: true
  ssh_config.template: |
    Host ${HOST}
    user default
    port ${FIOTEST_SSH_PORT}
    StrictHostKeyChecking no
    PasswordAuthentication no
    UserKnownHostsFile /dev/null
    IdentityFile ~/.ssh/id_rsa
