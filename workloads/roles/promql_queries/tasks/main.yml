---
- name: Get Start Time
  shell: |
    oc get configmap "scale-ci-{{ job_name }}-{{ build_number }}-run-info" -n scale-ci-tooling -o jsonpath="{.data.starttime}"
  register: start_time_cmd
- name: Set Start time
  set_fact:
    start_time: "{{start_time_cmd.stdout}}"
- name: Set End time
  set_fact:
    end_time: "{{ansible_date_time.epoch}}"
- name: Get Promethues endpoint/url
  shell: |
    oc get route prometheus-k8s -n openshift-monitoring -o jsonpath="{.spec.host}"
  register: prom_url_cmd
- name: Get Prometheus password
  shell: |
    {%raw%}oc get secrets -n openshift-monitoring grafana-datasources -o go-template='{{index .data "prometheus.yaml"}}' | base64 --decode | jq '.datasources[0].basicAuthPassword'{%endraw%}
  register: prom_pass_cmd
- name: Set Prometheus user
  set_fact:
    prom_user: "internal"
- name: Set Prometheus pass
  set_fact:
    prom_pass: "{{prom_pass_cmd.stdout.replace('\"', '')}}"
  no_log: true
- name: Set Prometheus endpoint/url
  set_fact:
    prom_url: "{{prom_url_cmd.stdout}}"
- name: Template prometheus config
  template:
    src: "{{item.src}}"
    dest: "{{item.dest}}"
    lstrip_blocks: yes
  with_items:
    - src: prometheus.yml.j2
      dest: "{{ansible_user_dir}}/scale-ci-tooling/prometheus.yml"

# path to store reports 
- name: Set workload report file storage path
  set_fact:
    file_path: "/tmp/scale-ci-tooling/reports/{{job_name}}-{{build_number}}"
  
# create report dir if not exist
- name: Create dir if not exist
  command: "mkdir -p /tmp/scale-ci-tooling/reports/{{job_name}}-{{build_number}}"
  delegate_to: 127.0.0.1
  ignore_errors: ye
# Read promql vars from template
- name: Lookup list of prom queries
  shell: "cat {{ansible_user_dir}}/scale-ci-tooling/prometheus.yml"
  register: promql_queries_output

# Set promql vars from template
- name: Set fact
  set_fact:
    promql_queries: "{{ promql_queries_output.stdout | from_yaml }}"

# Debug vars/info
- name: Debug outputs
  debug:
    msg: 
    - "start time : {{ start_time }}"
    - "end_time : {{ end_time }}"
    - "Job name : {{job_name}}"
    - "Build Id : {{build_number}}"
    - "Workload name : {{workload_name}}"
    - "Prometheus user : {{prom_user}}"
    - "Prometheus password : {{prom_pass}}"
    - "Prometheus url : {{prom_url}}"
    - "Promql queries params : {{ promql_queries['query'] }}"

# Call the python program and generate csv or plot file
- name: Get/run reports
  command: |
   python3 "{{playbook_dir}}"/files/workload-report.py --start="1603976371.198" --end="1603979971.198" --step="{{item.step}}" --url="https://{{prom_url}}" --user="{{prom_user}}" --pass="{{prom_pass}}" --promql="{{item.expr}}" --file_path="{{file_path}}" --file_name="{{job_name + '-' + build_number + '-' + item.name + '.csv'}}"
  with_items: "{{ promql_queries['query'] }}"
  delegate_to: 127.0.0.1