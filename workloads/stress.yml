---
#
# Runs Stress I/O test on an existing RHCOS cluster
#

- name: Runs Stress I/O on a RHCOS cluster
  hosts: orchestration
  gather_facts: true
  remote_user: "{{orchestration_user}}"
  vars_files:
    - vars/stress.yml
  vars:
    workload_job: "stress"
  tasks:
    - name: Set starttime
      shell: |
        oc create configmap -n scale-ci-tooling scale-ci-{{ job_name }}-{{ build_number }}-run-info --from-literal=starttime="$(date +%s)" --dry-run -o yaml | kubectl apply -f - 

    - name: Create scale-ci-tooling directory
      file:
        path: "{{ansible_user_dir}}/scale-ci-tooling"
        state: directory

    - name: Copy workload files
      copy:
        src: "{{item.src}}"
        dest: "{{item.dest}}"
      with_items:
        - src: scale-ci-tooling-ns.yml
          dest: "{{ansible_user_dir}}/scale-ci-tooling/scale-ci-tooling-ns.yml"

    - name: Slurp kubeconfig file
      slurp:
        src: "{{kubeconfig_file}}"
      register: kubeconfig_file_slurp

    - name: Slurp ssh private key file
      slurp:
        src: "{{pbench_ssh_private_key_file}}"
      register: pbench_ssh_private_key_file_slurp

    - name: Slurp ssh public key file
      slurp:
        src: "{{pbench_ssh_public_key_file}}"
      register: pbench_ssh_public_key_file_slurp

    - name: Block to set clustername
      block:
        - name: Get cluster name
          shell: |
            {%raw%}oc get clusterversion -o jsonpath="{.items[].spec.clusterID}"{%endraw%}
          register: cluster_name

        - name: Create tooling service account
          set_fact:
            snafu_cluster_name: cluster_name.stdout
          when: cluster_name is succeeded
      when: snafu_cluster_name == ""

    - name: Template workload templates
      template:
        src: "{{item.src}}"
        dest: "{{item.dest}}"
        lstrip_blocks: yes
      with_items:
        - src: pbench-cm.yml.j2
          dest: "{{ansible_user_dir}}/scale-ci-tooling/pbench-cm.yml"
        - src: pbench-ssh-secret.yml.j2
          dest: "{{ansible_user_dir}}/scale-ci-tooling/pbench-ssh-secret.yml"
        - src: kubeconfig-secret.yml.j2
          dest: "{{ansible_user_dir}}/scale-ci-tooling/kubeconfig-secret.yml"
        - src: workload-job.yml.j2
          dest: "{{ansible_user_dir}}/scale-ci-tooling/workload-job.yml"
        - src: workload-stress-script-cm.yml.j2
          dest: "{{ansible_user_dir}}/scale-ci-tooling/workload-stress-script-cm.yml"
        - src: workload-env.yml.j2
          dest: "{{ansible_user_dir}}/scale-ci-tooling/workload-stress-env.yml"

    - name: Check if scale-ci-tooling namespace exists
      shell: |
        oc get projects | grep "scale-ci-tooling"
      ignore_errors: true
      changed_when: false
      register: scale_ci_tooling_ns_exists
    - name: print status of scale_ci_tooling_ns_exists
      debug:
        var: scale_ci_tooling_ns_exists

    - name: Ensure any stale scale-ci-stress job is deleted
      shell: |
        oc delete job scale-ci-stress -n scale-ci-tooling
      register: scale_ci_tooling_project
      failed_when: scale_ci_tooling_project.rc == 0
      until: scale_ci_tooling_project.rc == 1
      retries: 60
      delay: 1
      when: scale_ci_tooling_ns_exists.rc == 0

    - name: Block for non-existing tooling namespace
      block:
        - name: Create tooling namespace
          shell: |
            oc create -f {{ansible_user_dir}}/scale-ci-tooling/scale-ci-tooling-ns.yml
      when: scale_ci_tooling_ns_exists.rc != 0

    - name: Create tooling service account
      shell: |
        oc create serviceaccount useroot -n scale-ci-tooling
        oc adm policy add-scc-to-user privileged -z useroot -n scale-ci-tooling
      when: enable_pbench_agents|bool

    - name: Add serviceaccount for useroot when pbench is not used
      shell: |
        oc delete serviceaccount -n scale-ci-tooling useroot
        oc create serviceaccount useroot -n scale-ci-tooling
      when: not enable_pbench_agents|bool

    - name: Create/replace kubeconfig secret
      shell: |
        oc replace --force -n scale-ci-tooling -f "{{ansible_user_dir}}/scale-ci-tooling/kubeconfig-secret.yml"

    - name: Create/replace the pbench configmap
      shell: |
        oc replace --force -n scale-ci-tooling -f "{{ansible_user_dir}}/scale-ci-tooling/pbench-cm.yml"

    - name: Create/replace pbench ssh secret
      shell: |
        oc replace --force -n scale-ci-tooling -f "{{ansible_user_dir}}/scale-ci-tooling/pbench-ssh-secret.yml"

    - name: Create/replace workload script configmap
      shell: |
        oc replace --force -n scale-ci-tooling -f "{{ansible_user_dir}}/scale-ci-tooling/workload-stress-script-cm.yml"

    - name: Create/replace workload script environment configmap
      shell: |
        oc replace --force -n scale-ci-tooling -f "{{ansible_user_dir}}/scale-ci-tooling/workload-stress-env.yml"

    - name: Enable azure authentication when running ocp on azure
      include_role:
        name: azure-auth
      when: azure_auth and azure_auth_file != ""

    - name: Create/replace workload job to that runs workload script
      shell: |
        oc replace --force -n scale-ci-tooling -f "{{ansible_user_dir}}/scale-ci-tooling/workload-job.yml"

    - name: Poll until job is running
      shell: |
        oc get pods --selector=job-name=scale-ci-stress -n scale-ci-tooling -o json
      register: pod_json
      retries: 60
      delay: 2
      until: pod_json.stdout | from_json | json_query('items[0].status.phase==`Running`')
      when: not enable_prometheus_queries
      # when comment added

    - name: Poll until job is complete
      shell: |
        oc get job scale-ci-stress -n scale-ci-tooling -o json
      register: job_json
      retries: "{{job_completion_poll_attempts}}"
      delay: 30
      until: job_json.stdout | from_json | json_query('status.succeeded==`1` || status.failed==`1`')
      failed_when: job_json.stdout | from_json | json_query('status.succeeded==`1`') == false
      #when: job_completion_poll_attempts|int > 0
      when: not enable_prometheus_queries
      # when comment added

    - name: Set up PromQL Queries
      block:
        - name: Get Start Time
          shell: |
            oc get configmap "scale-ci-{{ job_name }}-{{ build_number }}-run-info" -n scale-ci-tooling -o jsonpath="{.data.starttime}"
          register: start_time_cmd
        - name: Set Start time
          set_fact:
            start_time: "{{start_time_cmd.stdout}}"
        - name: Set End time
          set_fact:
            end_time: "{{ansible_date_time.epoch}}"
        - name: Get Promethues endpoint/url
          shell: |
            oc get route prometheus-k8s -n openshift-monitoring -o jsonpath="{.spec.host}"
          register: prom_url_cmd
        - name: Get Prometheus password
          shell: |
            {%raw%}oc get secrets -n openshift-monitoring grafana-datasources -o go-template='{{index .data "prometheus.yaml"}}' | base64 --decode | jq '.datasources[0].basicAuthPassword'{%endraw%}
          register: prom_pass_cmd
        - name: Set Prometheus user
          set_fact:
            prom_user: "internal"
        - name: Set Prometheus pass
          set_fact:
            prom_pass: "{{prom_pass_cmd.stdout.replace('\"', '')}}"
          no_log: true
        - name: Set Prometheus endpoint/url
          set_fact:
            prom_url: "{{prom_url_cmd.stdout}}"
        - name: Template prometheus config
          template:
            src: "{{item.src}}"
            dest: "{{item.dest}}"
            lstrip_blocks: yes
          with_items:
            - src: prometheus.yml.j2
              dest: "{{ansible_user_dir}}/scale-ci-tooling/prometheus.yml"
        
        # path to store reports 
        - name: Set workload report file storage path
          set_fact:
            file_path: "{{ansible_user_dir}}/scale-ci-tooling/reports"
          
        # create report dir if not exist
        - name: Create dir if not exist
          command: "mkdir {{ansible_user_dir}}/scale-ci-tooling/reports"
          ignore_errors: yes

        # Read promql vars from template
        - name: Lookup list of prom queries
          shell: "cat {{ansible_user_dir}}/scale-ci-tooling/prometheus.yml"
          register: promql_queries_output
        
        # Set promql vars from template
        - name: Set fact
          set_fact:
            promql_queries: "{{ promql_queries_output.stdout | from_yaml }}"
        
        - name: Get reports
          command: |
           python3 "{{playbook_dir}}"/files/workload-report.py --start={{item.start_time}} --end={{item.end_time}} --url={{prom_url}} --user={{prom_user}} --pass={{prom_pass}} --promql={{item.expr}} --file_path={{file_path}} --file_name={{job_name + '-' + build_number + '-' + item.name + '.csv'}}
          with_items: "{{ promql_queries['query'] }}"
          delegate_to: 127.0.0.1

        # Call the python program and generate csv or plot file
        - name: Debug outputs
          debug:
            msg: 
            - "start time : {{ start_time }}"
            - "end_time : {{ end_time }}"
            - "Job name : {{job_name}}"
            - "Build Id : {{build_number}}"
            - "Workload name : {{workload_name}}"
            - "Prometheus user : {{prom_user}}"
            - "Prometheus password : {{prom_pass}}"
            - "Prometheus url : {{prom_url}}"
            - "Promql queries params : {{ promql_queries['query'] }}"
      when: enable_prometheus_queries
